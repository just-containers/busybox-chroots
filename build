#!/usr/bin/env bash
set -e

TARGET=$1

if [[ -z "${TARGET}" ]] ; then
    echo "Usage: $0 target"
    exit 1
fi

unset CC CXX LINK AR NM READELF RANLIB

source versions

THISDIR=$(pwd)
DISTDIR=${THISDIR}/dist
DOWNLOADDIR=${THISDIR}/downloads
BUILDDIR=${THISDIR}/builds
TOOLDIR=${THISDIR}/tools
CHROOTDIR=${THISDIR}/chroots
PATCHDIR=${THISDIR}/patches
LOGDIR=${THISDIR}/logs

mkdir -p $DISTDIR
mkdir -p $DOWNLOADDIR
mkdir -p $BUILDDIR
mkdir -p $TOOLDIR
mkdir -p $CHROOTDIR
mkdir -p $LOGDIR
rm -f $LOGDIR/*${TARGET}*.txt

declare -A linux_arches
linux_arches[x86_64-linux-musl]=x86_64
linux_arches[i486-linux-musl]=x86
linux_arches[arm-linux-musleabihf]=arm
linux_arches[arm-linux-musleabi]=arm
linux_arches[aarch64-linux-musl]=arm64
linux_arches[powerpc64le-linux-musl]=powerpc

declare -A short_arches
short_arches[x86_64-linux-musl]=amd64
short_arches[i486-linux-musl]=x86
short_arches[arm-linux-musleabihf]=armhf
short_arches[arm-linux-musleabi]=arm
short_arches[aarch64-linux-musl]=aarch64
short_arches[powerpc64le-linux-musl]=ppc64le

declare -A gcc_args
gcc_args[x86_64-linux-musl]=""
gcc_args[i486-linux-musl]=""
gcc_args[arm-linux-musleabihf]=" --with-float=hard"
gcc_args[arm-linux-musleabi]=""
gcc_args[aarch64-linux-musl]=""
bcc_args[powerpc64le-linux-musl]=""

mkdir -p $TOOLDIR/${TARGET}

mkdir -p $CHROOTDIR/${TARGET}
mkdir -p $CHROOTDIR/${TARGET}/usr/bin
mkdir -p $CHROOTDIR/${TARGET}/bin
mkdir -p $CHROOTDIR/${TARGET}/usr/sbin
mkdir -p $CHROOTDIR/${TARGET}/sbin
mkdir -p $CHROOTDIR/${TARGET}/dev
mkdir -p $CHROOTDIR/${TARGET}/proc
mkdir -p $CHROOTDIR/${TARGET}/sys
mkdir -p $CHROOTDIR/${TARGET}/src
mkdir -p $CHROOTDIR/${TARGET}/run
mkdir -p $CHROOTDIR/${TARGET}/tmp
mkdir -p $CHROOTDIR/${TARGET}/var
mkdir -p $CHROOTDIR/${TARGET}/etc
mkdir -p $CHROOTDIR/${TARGET}/root

printf "root:!:0:0::/root:/bin/sh\n" > $CHROOTDIR/${TARGET}/etc/passwd
printf "root:x:0:\n" > $CHROOTDIR/${TARGET}/etc/group
printf "/bin/sh\n" > $CHROOTDIR/${TARGET}/etc/shells


if [[ ! -f "$DOWNLOADDIR/gcc-${GCC_VER}-${TARGET}.tar.xz" ]] ; then
    printf 'Downloading cross-compiler\n'
    curl -s -R -L -o "$DOWNLOADDIR/gcc-${GCC_VER}-${TARGET}.tar.xz" \
      "https://github.com/just-containers/musl-cross-make/releases/download/v12/gcc-${GCC_VER}-${TARGET}.tar.xz"
fi

tar xf $DOWNLOADDIR/gcc-${GCC_VER}-${TARGET}.tar.xz -C $TOOLDIR/${TARGET}

echo "Building kernel headers"

mkdir -p $BUILDDIR/${TARGET}
tar xf $DOWNLOADDIR/linux-${LINUX_VER}.tar.xz -C $BUILDDIR/${TARGET}

if [[ -d $PATCHDIR/linux-${LINUX_VER} ]] ; then
    cat $PATCHDIR/linux-${LINUX_VER}/* | ( cd $BUILDDIR/${TARGET}/linux-${LINUX_VER} && patch -p1)
fi

PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/kernel-${TARGET}.txt -- \
make -C $BUILDDIR/${TARGET}/linux-${LINUX_VER} ARCH=${linux_arches[${TARGET}]} CC=${TARGET}-gcc INSTALL_HDR_PATH=${CHROOTDIR}/${TARGET}/usr headers_install >/dev/null

cd $BUILDDIR
rm -rf $BUILDDIR/${TARGET}/linux-${LINUX_VER}

tar xf $DOWNLOADDIR/busybox-${BUSYBOX_VER}.tar.bz2 -C $BUILDDIR/${TARGET}
if [[ -d $PATCHDIR/busybox-${BUSYBOX_VER} ]] ; then
    cat $PATCHDIR/busybox-${BUSYBOX_VER}/* | ( cd $BUILDDIR/${TARGET}/busybox-${BUSYBOX_VER} && patch -p1)
fi

echo "Building busybox"

CFLAGS="-g0 -Os" \
CXXFLAGS="-g0 -Os" \
LDFLAGS="-s -static" \
PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/busybox-${TARGET}-configure.txt -- \
make -C $BUILDDIR/${TARGET}/busybox-${BUSYBOX_VER} \
  -j$(nproc) \
  CROSS_COMPILE=${TARGET}- \
  defconfig \
>/dev/null

CFLAGS="-g0 -Os" \
CXXFLAGS="-g0 -Os" \
LDFLAGS="-s -static" \
PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/busybox-${TARGET}-build.txt -- \
make -C $BUILDDIR/${TARGET}/busybox-${BUSYBOX_VER} \
  -j$(nproc) \
  CONFIG_PREFIX=$CHROOTDIR/${TARGET} \
  CROSS_COMPILE=${TARGET}- \
  VERBOSE=1 \
  V=1 \
>/dev/null

CFLAGS="-g0 -Os" \
CXXFLAGS="-g0 -Os" \
LDFLAGS="-s -static" \
PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/busybox-${TARGET}-install.txt -- \
make -C $BUILDDIR/${TARGET}/busybox-${BUSYBOX_VER} \
  CROSS_COMPILE=${TARGET}- \
  CONFIG_PREFIX=$CHROOTDIR/${TARGET} install \
>/dev/null

cd $BUILDDIR
rm -rf $BUILDDIR/${TARGET}/busybox-${BUSYBOX_VER}

tar xf $DOWNLOADDIR/musl-${MUSL_VER}.tar.gz -C $BUILDDIR/${TARGET}

if [[ -d $PATCHDIR/musl-${MUSL_VER} ]] ; then
    cat $PATCHDIR/musl-${MUSL_VER}/* | ( cd $BUILDDIR/${TARGET}/musl-${MUSL_VER} && patch -p1)
fi

cd $BUILDDIR/${TARGET}/musl-${MUSL_VER}

echo "Building musl"

CFLAGS="-g0 -Os" \
CXXFLAGS="-g0 -Os" \
LDFLAGS="-s" \
PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
CROSS_COMPILE=${TARGET}- \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/musl-${TARGET}-configure.txt -- \
./configure --prefix=/usr >/dev/null

PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/musl-${TARGET}-build.txt -- \
make -j$(nproc) \
>/dev/null

PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/musl-${TARGET}-install.txt -- \
make -j$(nproc) DESTDIR=$CHROOTDIR/${TARGET} install \
>$LOGDIR/musl.txt 2>&1

cd $BUILDDIR
rm -rf $BUILDDIR/${TARGET}/musl-${MUSL_VER}

tar xf $DOWNLOADDIR/binutils-${BINUTILS_VER}.tar.xz -C $BUILDDIR/${TARGET}

if [[ -d $PATCHDIR/binutils-${BINUTILS_VER} ]] ; then
    cat $PATCHDIR/binutils-${BINUTILS_VER}/* | ( cd $BUILDDIR/${TARGET}/binutils-${BINUTILS_VER} && patch -p1)
fi

cd $BUILDDIR/${TARGET}/binutils-${BINUTILS_VER}

echo "Building binutils"

rm -rf build
mkdir build
cd build

CFLAGS="-g0 -Os" \
CXXFLAGS="-g0 -Os" \
LDFLAGS="-s" \
PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/binutils-${TARGET}-configure.txt -- \
../configure \
  --prefix=/usr \
  --build="$(gcc -dumpmachine)" \
  --target="$TARGET" \
  --host="$TARGET" \
  --disable-nls > /dev/null

PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/binutils-${TARGET}-build.txt -- \
make -j$(nproc) >/dev/null

PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/binutils-${TARGET}-install.txt -- \
make -j$(nproc) DESTDIR=$CHROOTDIR/${TARGET} install >/dev/null

cd $BUILDDIR
rm -rf $BUILDDIR/${TARGET}/binutils-${BINUTILS_VER}

tar xf $DOWNLOADDIR/make-${MAKE_VER}.tar.bz2 -C $BUILDDIR/${TARGET}

if [[ -d $PATCHDIR/make-${MAKE_VER} ]] ; then
    cat $PATCHDIR/make-${MAKE_VER}/* | ( cd $BUILDDIR/${TARGET}/make-${MAKE_VER} && patch -p1)
fi

cd $BUILDDIR/${TARGET}/make-${MAKE_VER}

echo "Building make"

CFLAGS="-g0 -Os" \
CXXFLAGS="-g0 -Os" \
LDFLAGS="-s" \
PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/make-${TARGET}-configure.txt -- \
./configure \
  --prefix=/usr \
  --build="$(gcc -dumpmachine)" \
  --host="$TARGET" \
  --disable-nls \
  --without-guile \
  --without-dmalloc >/dev/null

PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/make-${TARGET}-build.txt -- \
make -j$(nproc) >/dev/null

PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/make-${TARGET}-install.txt -- \
make -j$(nproc) DESTDIR=$CHROOTDIR/${TARGET} install >/dev/null

cd $BUILDDIR
rm -rf $BUILDDIR/${TARGET}/make-${MAKE_VER}

tar xf $DOWNLOADDIR/gcc-${GCC_VER}.tar.xz -C $BUILDDIR/${TARGET}

if [[ -d $PATCHDIR/gcc-${GCC_VER} ]] ; then
    cat $PATCHDIR/gcc-${GCC_VER}/* | ( cd $BUILDDIR/${TARGET}/gcc-${GCC_VER} && patch -p1)
fi

cd $BUILDDIR/${TARGET}/gcc-${GCC_VER}
tar xf $DOWNLOADDIR/gmp-${GMP_VER}.tar.xz
tar xf $DOWNLOADDIR/mpfr-${MPFR_VER}.tar.xz
tar xf $DOWNLOADDIR/mpc-${MPC_VER}.tar.gz
tar xf $DOWNLOADDIR/isl-${ISL_VER}.tar.xz

rm -rf gmp mpfr mpc isl
mv gmp-${GMP_VER} gmp
mv mpfr-${MPFR_VER} mpfr
mv mpc-${MPC_VER} mpc
mv isl-${ISL_VER} isl
cp mpfr/config.sub gmp/config.sub

rm -rf build-gcc
mkdir build-gcc
cd build-gcc

echo "Building gcc"

CFLAGS="-g0 -Os" \
CXXFLAGS="-g0 -Os" \
LDFLAGS="-s" \
PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/gcc-${TARGET}-configure.txt -- \
../configure \
  --prefix=/usr \
  ${gcc_args[$TARGET]} \
  --build="$(gcc -dumpmachine)" \
  --target="$TARGET" \
  --host="$TARGET" \
  --enable-languages=c,c++ \
  --disable-libquadmath \
  --disable-decimal-float \
  --disable-nls \
  --disable-werror \
  --disable-multilib \
  --disable-libmudflap \
  --disable-libsanitizer \
  --disable-gnu-indirect-function \
  --disable-libmpx \
  --enable-deterministic-archives \
  --enable-libstdcxx-time > /dev/null

PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/gcc-${TARGET}-build.txt -- \
make -j$(nproc) > /dev/null

PATH="$TOOLDIR/${TARGET}/bin:$PATH" \
$DOWNLOADDIR/bin/runlog -l $LOGDIR/gcc-${TARGET}-install.txt -- \
make -j$(nproc) DESTDIR=$CHROOTDIR/${TARGET} install >/dev/null

cd $BUILDDIR
rm -rf $BUILDDIR/${TARGET}/make-${MAKE_VER}
rm -rf $TOOLDIR/${TARGET}

tar -czf $DISTDIR/chroot-${short_arches[${TARGET}]}.tar.gz \
  --owner 0 \
  --group 0 \
  -C $CHROOTDIR/${TARGET} .

